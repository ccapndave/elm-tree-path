module TreePath.Tree<%- height %> exposing
  ( DecoderConfig
  , decoder
  , pathDecoder
  , toRootPath
  , Tree
  <% for (let n = height; n >= 1; n--) { %>
  , TreePath<%- n %>
  , pathEncode<%- n %>
  , data<%- n %>
  , top<%- n %>
  , up<%- n %>
  , offset<%- n %>
  , down<%- n %>
  , downs<%- n %>
  <% } %>
  )

{-| This module provides types and functions for managing a strongly typed tree
of depth <%- height %>.  Each level of the tree can have its own type, and each level can
contain Data either of that type, or the leaf type.

# Definition
@docs Tree, <%- Array.from({ length: height }, (_, i) => i + 1).map(i => `TreePath${i}`).join(", ") %>

# Encoders and decoders
@docs DecoderConfig, decoder, pathDecoder, <%- Array.from({ length: height }, (_, i) => i + 1).map(i => `pathEncode${i}`).join(", ") %>

# Path constructor
@docs toRootPath

# Data
@docs <%- Array.from({ length: height }, (_, i) => i + 1).map(i => `data${i}`).join(", ") %>

# Navigation
@docs <%- Array.from({ length: height }, (_, i) => i + 1).map(i => `top${i}, up${i}, offset${i}, down${i}, downs${i}`).join(", ") %>
-}

import TreePath.Data as Data exposing (Data)
import Array exposing (Array)
import Json.Decode as JD exposing (Decoder)
import Json.Encode as JE exposing (Value)

{-|
-}
type alias Tree <%- alphabet(height - 1) %> leaf =
  Tree<%- height %> <%- alphabet(height - 1) %> leaf

type Tree1 leaf =
  Tree1
    { data : leaf
    }

<% for (let n = 2; n <= height; n++) { %>
type Tree<%- n %> <%- alphabet(n - 1) %> leaf =
  Tree<%- n %>
    { data : Data a leaf
    , children : Array (Tree<%- n-1 %> <%- alphabet(n - 2, 1) %> leaf)
    }

<% } %>

<% for (let n = 1; n <= height; n++) { %>
{-|
-}
type TreePath<%- n %> <%- alphabet(height - 1) %> leaf =
  TreePath<%- n %>
    { tree : Tree<%- height %> <%- alphabet(height - 1) %> leaf
    , path : Array Int
    }
<% } %>

{-|
-}
type alias DecoderConfig <%- alphabet(height - 1) %> leaf path =
  {
    <% for (let n = height; n > 1; n--) { %>
      <%- n < height ? "," : "" %> level<%- n %> :
        { decoder : Decoder <%- alphabet(1, height - n) %>
        , encoders : <%- alphabet(1, height - n) %> -> List (String, Value)
        , pathType : TreePath<%- n %> <%- alphabet(height - 1) %> leaf -> path
        , childrenField : String
        }
    <% } %>
    , leaf :
      { decoder : Decoder leaf
      , encode : leaf -> Value
      , pathType : TreePath1 <%- alphabet(height - 1) %> leaf -> path
      }
  }

{-|
-}
decoder : DecoderConfig <%- alphabet(height - 1) %> leaf path -> Decoder (Tree<%- height %> <%- alphabet(height - 1) %> leaf)
decoder config =
  decoder<%- height %>
    <% for (let n = height; n > 1; n--) { %>
    (config.level<%- n %>.decoder, config.level<%- n %>.childrenField)
    <% } %>
    config.leaf.decoder

encode : DecoderConfig <%- alphabet(height - 1) %> leaf path -> Tree<%- height %> <%- alphabet(height - 1) %> leaf -> Value
encode config tree =
  encode<%- height %>
    <% for (let n = height; n > 1; n--) { %>
    (config.level<%- n %>.encoders, config.level<%- n %>.childrenField)
    <% } %>
    config.leaf.encode
    tree

{-|
-}
pathDecoder : DecoderConfig <%- alphabet(height - 1) %> leaf path -> Decoder path
pathDecoder config =
  (JD.field "path" <| JD.array JD.int)
    |> JD.andThen (\path ->
      case Array.length path of
        <% for (let j = 0; j < height; j++) { %>
        <%- j %> -> JD.succeed (config.<% if (j === height - 1) { %>leaf.pathType<% } else { %>level<%- height - j %>.pathType<% } %> << TreePath<%- height - j %>)
        <% } %>
        otherwise -> JD.fail <| "Illegal path length " ++ toString (Array.length path)
    )
    |> JD.andThen (\pathConstructor ->
      JD.map2 (\tree path -> pathConstructor { tree = tree, path = path })
        (JD.field "tree" <| decoder config)
        (JD.field "path" <| JD.array JD.int)
    )

{-|
-}
toRootPath : Tree<%- height %> <%- alphabet(height - 1) %> leaf -> TreePath<%- height %> <%- alphabet(height - 1) %> leaf
toRootPath tree =
  TreePath<%- height %>
    { tree = tree
    , path = Array.empty
    }

<% for (let n = 1; n <= height; n++) { %>
decoder<%- n %> : <%- n > 1 ? alphabet(n-1).split(" ").map(letter => `(Decoder ${letter}, String)`).join(" -> ") + "->" : "" %> Decoder leaf -> Decoder (Tree<%- n %> <%- alphabet(n - 1) %> leaf)
decoder<%- n %> <%- n > 1 ? alphabet(n-1).split(" ").map(letter => `(${letter}Decoder, ${letter}ChildrenField)`).join(" ") : "" %> leafDecoder =
  <% if (n === 1) { %>
  leafDecoder
    |> JD.map (\data -> Tree1 { data = data })
  <% } else { %>
  JD.oneOf
      [ JD.map2 (\data children -> Tree<%- n %> { data = data, children = children })
          (aDecoder |> JD.map Data.BranchData)
          (JD.field aChildrenField (JD.array <| decoder<%- n - 1 %> <%- n > 2 ? alphabet(n - 2, 1).split(" ").map(letter => `(${letter}Decoder, ${letter}ChildrenField)`).join(" ") : "" %> leafDecoder))
      , JD.map (\data -> Tree<%- n %> { data = data, children = Array.empty })
          (leafDecoder |> JD.map Data.LeafData)
      ]
  <% } %>

encode<%- n %> : <%- n > 1 ? alphabet(n-1).split(" ").map(letter => `(${letter} -> List (String, Value), String)`).join(" -> ") + "->" : "" %> (leaf -> Value) -> Tree<%- n %> <%- alphabet(n - 1) %> leaf -> Value
encode<%- n %> <%- n > 1 ? alphabet(n-1).split(" ").map(letter => `(${letter}Encoders, ${letter}ChildrenField)`).join(" ") : "" %> leafEncode (Tree<%- n %> { data <% if (n > 1) { %>, children<% } %> }) =
  <% if (n === 1) { %>
  leafEncode data
  <% } else { %>
  case data of
    Data.BranchData b ->
      JE.object <|
        (aChildrenField, JE.array <| Array.map (encode<%- n - 1 %> <%- n > 2 ? alphabet(n - 2, 1).split(" ").map(letter => `(${letter}Encoders, ${letter}ChildrenField)`).join(" ") : "" %> leafEncode) children) :: aEncoders b

    Data.LeafData l ->
      leafEncode l
  <% } %>

{-|
-}
pathEncode<%- n %> : DecoderConfig <%- alphabet(height - 1) %> leaf path -> TreePath<%- n %> <%- alphabet(height - 1) %> leaf -> Value
pathEncode<%- n %> config (TreePath<%- n %> { tree, path }) =
  JE.object
    [ ("tree", encode config tree)
    , ("path", (JE.array << Array.map JE.int) path)
    ]

getFocusedTree<%- n %> : TreePath<%- n %> <%- alphabet(height - 1) %> leaf -> Tree<%- n %> <%- alphabet(n - 1, height - n) %> leaf
getFocusedTree<%- n %> (TreePath<%- n %> { tree, path }) =
  <% if (n === height) { %>
  tree
  <% } else { %>
  getFocusedTree<%- n + 1 %> (TreePath<%- n + 1 %> { tree = tree, path = path })
    |> treeChildren<%- n + 1 %>
    |> Array.get (Array.get <%- height - (n + 1) %> path |> unsafe "getFocusedTree<%- n %>")
    |> unsafe "getFocusedTree<%- n %>"
  <% } %>

<% if (n > 1) { %>
treeChildren<%- n %> : Tree<%- n %> <%- alphabet(n - 1) %> leaf -> Array (Tree<%- n - 1 %> <% if (n === 2) { %>leaf<% } else { %><%- alphabet(n - 2, 1) %> leaf<% } %>)
treeChildren<%- n %> (Tree<%- n %> { children }) = children
<% } %>

treeData<%- n %> : Tree<%- n %> <%- alphabet(n - 1) %> leaf -> <% if (n === 1) { %>leaf<% } else { %>Data a leaf<% } %>
treeData<%- n %> (Tree<%- n %> { data }) = data

{-|
-}
data<%- n %> : TreePath<%- n %> <%- alphabet(height - 1) %> leaf -> <% if (n === 1) { %>leaf<% } else { %>Data <%- alphabet(1, height - (n)) %> leaf<% } %>
data<%- n %> = getFocusedTree<%- n %> >> treeData<%- n %>

{-|
-}
top<%- n %> : TreePath<%- n%> <%- alphabet(height - 1) %> leaf -> TreePath<%- height %> <%- alphabet(height - 1) %> leaf
top<%- n %> (TreePath<%- n %> { tree, path }) = TreePath<%- height %> { tree = tree, path = Array.empty }

{-|
-}
offset<%- n %> : Int -> TreePath<%- n %> <%- alphabet(height - 1) %> leaf -> Maybe (TreePath<%- n %> <%- alphabet(height - 1) %> leaf)
offset<%- n %> dx (TreePath<%- n %> { tree, path } as treePath) =
  <% if (n === height) { %>
  Nothing
  <% } else { %>
  treePath
    |> up<%- n %>
    |> Maybe.andThen (down<%- n + 1 %> <| (Array.get <%- height - (n + 1) %> path |> unsafe "offset<%- n %>") + dx)
  <% } %>

{-|
-}
down<%- n %> : Int -> TreePath<%- n %> <%- alphabet(height - 1) %> leaf -> Maybe <% if (n === 1) { %>Never<% } else { %>(TreePath<%- n - 1 %> <%- alphabet(height - 1) %> leaf)<% } %>
down<%- n %> idx (TreePath<%- n %> { tree, path } as treePath) =
  <% if (n === 1) { %>
  Nothing
  <% } else { %>
  getFocusedTree<%- n %> treePath
    |> treeChildren<%- n %>
    |> Array.get idx
    |> Maybe.map (\_ -> TreePath<%- n - 1 %> { tree = tree, path = Array.push idx path })
  <% } %>

{-|
-}
downs<%- n %> : TreePath<%- n %> <%- alphabet(height - 1) %> leaf -> List <% if (n === 1) { %>Never<% } else { %>(TreePath<%- n - 1 %> <%- alphabet(height - 1) %> leaf)<% } %>
downs<%- n %> ((TreePath<%- n %> { tree, path }) as treePath) =
  <% if (n === 1) { %>
  []
  <% } else { %>
  getFocusedTree<%- n %> treePath
    |> treeChildren<%- n %>
    |> (\children -> Array.length children - 1)
    |> List.range 0
    |> List.map (\idx -> TreePath<%- n - 1 %> { tree = tree, path = Array.push idx path })
  <% } %>

{-|
-}
up<%- n %> : TreePath<%- n %> <%- alphabet(height - 1) %> leaf -> Maybe <% if (n === height) { %>Never<% } else { %>(TreePath<%- n + 1 %> <%- alphabet(height - 1) %> leaf)<% } %>
up<%- n %> (TreePath<%- n %> { tree, path }) =
  <% if (n === height) { %>
  Nothing
  <% } else { %>
  Just <| TreePath<%- n + 1 %> { tree = tree, path = Array.slice 0 -1 path }
  <% } %>
<% } %>

unsafe : String -> Maybe a -> a
unsafe msg maybe =
  case maybe of
    Just a -> a
    Nothing -> Debug.crash msg
